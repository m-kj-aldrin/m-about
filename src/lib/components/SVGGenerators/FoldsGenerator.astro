---
import { IF } from "@u/comperator";
import { range } from "@u/iter";
import { clamp } from "@u/map";
import { chance, irand } from "@u/stokhos";

interface Props {
  stride?: number;
  iterations?: number;
}

const { stride = 6, iterations = 16 } = Astro.props;

const n = iterations;
let prevY = 0;
let prevX = 0;
let yStride = stride;
---

<svg
  viewBox="0 0 256 256"
  preserveAspectRatio="xMidYMid"
  width="100%"
  height="100%"
>
  <g filter="url(#filter-scrible)">
    <g
      transform="translate(32 4)"
      stroke-width="0.75"
      filter=""
      color="hsl(var(--color-offset))"
    >
      {
        range(n).map((i) => {
          let d = irand(1, 6) * 32;
          if (i % 2) {
            d = prevX - d;
          } else {
            d = prevX + d;
          }
          d = clamp(d, 0, 192);
          let yOffset = irand(1, 4) * yStride;
          const currY = prevY;
          const currX = prevX;
          prevY += yOffset;
          prevX = d;
          return (
            <g transform={`translate(0 ${currY})`}>
              <path
                d={`M${currX},0 H${d}`}
                fill="currentColor"
                stroke="currentColor"
                stroke-dasharray={chance(0.75) ? "2" : null}
              />
              <g>
                <path
                  fill={chance(0.75) ? "currentColor" : "none"}
                  stroke="currentColor"
                  d={`M${d},0 a1,1 0 0 ${i % 2 ? 0 : 1} 0 ${yOffset}`}
                />
                {IF(chance(0.75), () => {
                  return range(irand(1, irand(1, 2) * 3)).map((j, _i, arr) => {
                    let dir = Boolean(i % 2);
                    return (
                      <g transform={`translate(${d} 0)`}>
                        <g
                          stroke-width="0.5"
                          opacity={`${1 - (_i / arr.length) * 0.75}`}
                          transform={`translate(${IF(dir, "-")}${
                            (j + 1) * (yOffset / 2)
                          } 0)`}
                        >
                          <path
                            fill={"none"}
                            stroke="currentColor"
                            fill="none"
                            d={`M0,0 a1,1 0 0 ${dir ? 0 : 1} 0 ${yOffset}`}
                          />
                          {IF(chance(0.5) && dir, () => {
                            return (
                              <circle
                                fill="currentColor"
                                stroke-dasharray={chance(0.75) ? "2" : null}
                                cy={yOffset}
                                r="1"
                              />
                            );
                          })}
                        </g>
                      </g>
                    );
                  });
                })}
              </g>
              {IF(chance(0.25), () => {
                return (
                  <g transform={`translate(${d} 0)`}>
                    <circle r="1" fill="currentColor" />
                    {IF(chance(0.75), () => {
                      return (
                        <g transform={`translate(0 ${yOffset / 2})`}>
                          <circle fill="currentColor" r={yOffset / 8} />
                        </g>
                      );
                    })}
                  </g>
                );
              })}
            </g>
          );
        })
      }
      <circle r="2" fill="hsl(var(--color-ternary))"></circle>
      <g transform={`translate(${prevX} ${prevY})`}>
        <path d={`M0,0 v16`} stroke="currentColor"></path>
        <circle r="1" cy="16" fill="currentColor"></circle>
        <g transform="translate(0 24)">
          <circle r="1" cy="0" fill="currentColor"></circle>
          <path d="M0,0 v8" stroke="currentColor"></path>
          <circle r="2" cy="8" fill="hsl(var(--color-primary))"></circle>
        </g>
      </g>
    </g>
  </g>
</svg>
