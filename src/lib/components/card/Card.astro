---
import { ColorNames } from "@lib/types/colors";

interface Props {
  bgColor?: ColorNames;
  fgColor?: ColorNames;
  variant?: "default" | "inverse" | "outline" | "plain";
  title?: string;
}

const hasIllustration = Astro.slots.has("illustration");

const {
  variant,
  bgColor: _col0 = "primary",
  fgColor: _col1 = "light",
  title,
} = Astro.props;

const bgColor = `hsl(var(--color-${_col0}))`;
const fgColor = `hsl(var(--color-${_col1}))`;
---

<article data-variant={variant}>
  {title && <h2>{title}</h2>}
  <div class="inner-frame">
    {
      hasIllustration && (
        <div class="illustration">
          <slot name="illustration" />
        </div>
      )
    }

    <div class="blip"></div>
  </div>
</article>

<style define:vars={{ bgColor, fgColor }}>
  article {
    overflow: hidden;

    color: var(--fgColor);
    background-color: var(--bgColor);

    display: flex;
    flex-direction: column;

    /* gap: 8px; */
  }

  article :global(h2) {
    /* margin: 0; */
    /* font-family: Ringift; */
  }

  article,
  .inner-frame {
    padding: 16px;
    border-radius: 8px;
  }

  .inner-frame {
    overflow: hidden;
    background-color: currentColor;
    position: relative;
    flex-grow: 1;
  }

  .inner-frame > .illustration {
    color: var(--bgColor);
  }

  .illustration {
    width: 100%;
    height: 100%;
    display: grid;
    place-content: center;
  }

  [data-variant="inverse"] {
    color: var(--bgColor);
    background-color: var(--fgColor);
    border: 2px currentColor solid;
  }

  [data-variant="inverse"] .inner-frame * {
    color: var(--fgColor);
  }

  [data-variant="outline"] {
    color: var(--bgColor);
    border: 2px currentColor solid;
    background-color: transparent;
  }

  [data-variant="outline"] .inner-frame {
    background-color: transparent;
  }

  [data-variant="plain"] {
    border-top-right-radius: 64px;
  }
  [data-variant="plain"] h2 {
  }
  [data-variant="plain"] .blip {
    color: var(--fgColor);
  }
  [data-variant="plain"] .inner-frame {
    background-color: transparent;
    /* --bgColor: red; */
  }

  [data-variant="plain"] .inner-frame .illustration {
    /* --bgColor: currentColor !important; */
    /* --bgColor:  */
    color: currentColor
  }

  .blip {
    width: 24px;
    aspect-ratio: 1/1;
    border: 2px currentColor dotted;

    border-radius: 4px;
    border-bottom-right-radius: 12px;

    position: absolute;
    right: 8px;
    bottom: 8px;

    transition: background-color 75ms ease-out;
  }

  article:hover .blip {
    background-color: currentColor;
  }
</style>
