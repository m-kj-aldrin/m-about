---
import Nav from "@lib/components/Nav.astro";
import "@lib/style/main.css";
import ViewTransitions from "astro/components/ViewTransitions.astro";
import { fade } from "astro:transitions";
import "@lib/style/transition.css";
import type {
    TransitionAnimationPair,
    TransitionDirectionalAnimations,
} from "astro";

export interface Props {
    title?: string;
    fullScreen?: boolean;
}

const anim: TransitionAnimationPair = {
    new: [
        {
            name: "slideIn",
            duration: "200ms",
            easing: "ease",
        },
    ],
    old: [
        {
            name: "slideOut",
            duration: "200ms",
            easing: "ease",
            fillMode: "forwards",
            delay: "0ms",
        },
        { name: "fadeOut", delay: "200ms", easing: "ease" },
    ],
};

const mySlide: TransitionDirectionalAnimations = {
    forwards: anim,
    backwards: anim,
};

const { fullScreen, title } = Astro.props;
---

<!doctype html>
<html lang="en" data-route={title} data-fullscreen={fullScreen}>
    <head>
        <meta charset="UTF-8" />
        <meta name="description" content="Astro description" />
        <meta name="viewport" content="width=device-width" />
        <link rel="icon" type="image/svg+xml" href="/favicon.svg" />

        <link rel="preconnect" href="https://fonts.googleapis.com" />
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
        <link
            href="https://fonts.googleapis.com/css2?family=Azeret+Mono:wght@100;200;300&display=swap"
            rel="stylesheet"
        />

        <meta name="generator" content={Astro.generator} />
        <title>{title}</title>
    </head>
    <body>
        <header>
            <!-- <Social /> -->
            <Nav />
            <ViewTransitions />
        </header>

        <main class="wrapper" transition:animate={mySlide}>
            <slot />
        </main>
        <!-- <Grain /> -->
    </body>
</html>

<script is:inline>
    let route = document.documentElement.dataset.route;
    if (route != "home" && route != "ani") {
        let currentSvgTime = +localStorage.getItem("svgTime");
        let time = null;
        const updateTimeLine = (t) => {
            t /= 1000;
            if (time != null) {
                let delta = t - time;
                currentSvgTime += delta;
                localStorage.setItem("svgTime", `${currentSvgTime}`);
            }

            time = t;
            requestAnimationFrame(updateTimeLine);
        };
        requestAnimationFrame(updateTimeLine);
    }
</script>

<style>
    html[data-fullscreen] main {
        min-height: 0;
    }

    header {
        display: flex;
        justify-self: stretch;
        grid-area: 1/1;
        z-index: 100;

        position: relative;
    }
</style>
