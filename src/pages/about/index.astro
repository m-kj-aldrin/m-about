---
import Icon from "@lib/components/Icon.astro";
import BaseLayout from "@lib/layouts/BaseLayout.astro";

import { range } from "@lib/utils/iter";
import v from "@lib/utils/jsvec";
import { chance, frand, irand, stickyChance } from "@lib/utils/stokhos";

const r = 224;
const n0 = 32;
const n = 24;
const circles = range(n).map((i) => {
    const p = v.vec2(r, (i / n) * 2);
    const vec = v.fromPolar(p);
    return vec;
});

const scaleRotate = (r, s) => (vec) => v.rotateZ(v.mult(vec, s), r);

const circleFillChance = stickyChance(0.01, 0.01);
---

<BaseLayout title="about">
    <div class="inner">
        <!-- <div class="text">
            <p>
                <span>Marcus Aldrin</span>
            </p>
            <div class="social">
                <a href="mailto:marcus@urminne.xyz">
                    <Icon name="mail" />
                </a>
                <a href="https://github.com/m-kj-aldrin" target="_blank">
                    <Icon name="github" />
                </a>
            </div>
        </div> -->

        <svg viewBox="-256 -256 512 512" height="100%">
            <g transform="translate(0 0)" filter="url(#filter-scrible)">
                <g fill="hsl(var(--color-offset))" transform="scale(1.25)">
                    {
                        range(n0).flatMap((i) => {
                            const m = circles.map(
                                (vec, j) =>
                                    (vec = scaleRotate(
                                        ((i / n0) * 3) / 7 / 1,
                                        ((i + 1) / n0) * 0.75
                                    )(vec))
                            );

                            const pathString0 =
                                m.slice(3).reduce((s, value) => {
                                    return `${s} T${value[0]},${value[1]}`;
                                }, `M${m[0][0]},${m[0][1]} Q${m[1][0] / 1},${m[1][1] / 1} ${m[2][0]},${m[2][1]}`) +
                                "Z";

                            const pathString2 =
                                m.slice(1).reduce((s, value) => {
                                    return `${s} L${value[0]},${value[1]}`;
                                }, `M${m[0][0]},${m[0][1]}`) + "Z";

                            const pathString1 =
                                [...m.slice(1), m.at(0)].reduce((s, value) => {
                                    const r = v.len(value);
                                    return `${s} A${r / 4},${r / 4} 0 0 1 ${
                                        value[0]
                                    },${value[1]}`;
                                }, `M${m[0][0]},${m[0][1]}`) + "Z";

                            return (
                                <g fill="none">
                                    <g stroke-opacity={0.25 + (i / n0) * 0.75}>
                                        <g
                                            stroke="hsl(var(--color-primary))"
                                            stroke-width="1"
                                            stroke-linejoin="round"
                                            stroke-linecap="round"
                                        >
                                            <path
                                                d={pathString1}
                                                stroke-dasharray={[
                                                    irand(1, 3),
                                                    irand(3, 6),
                                                ]}
                                            />
                                        </g>
                                        <g
                                            stroke="hsl(var(--color-secondary))"
                                            stroke-width="0.25"
                                            stroke-linejoin="round"
                                            stroke-linecap="round"
                                        >
                                            <path d={pathString0} />
                                        </g>
                                        <g
                                            stroke="hsl(var(--color-offset))"
                                            stroke-width="0.5"
                                            stroke-linejoin="round"
                                            stroke-linecap="round"
                                        >
                                            <path
                                                d={pathString2}
                                                stroke-dasharray={[
                                                    irand(1, 3),
                                                    irand(3, 6),
                                                ]}
                                            />
                                        </g>
                                    </g>

                                    <g
                                        fill=""
                                        stroke="hsl(var(--color-offset))"
                                        stroke-width="0.5"
                                        stroke-opacity="0.75"
                                        fill-opacity="0.25"
                                        stroke-dasharray="1"
                                    >
                                        {m.map((p, j) => {
                                            const f = circleFillChance.next();
                                            return (
                                                <circle
                                                    cx={p[0]}
                                                    cy={p[1]}
                                                    r={irand(
                                                        0.5,
                                                        0.5 + (i / n0) * 8
                                                    )}
                                                    fill={
                                                        f
                                                            ? "hsl(var(--color-secondary))"
                                                            : null
                                                    }
                                                />
                                            );
                                        })}
                                    </g>
                                </g>
                            );
                        })
                    }
                </g>
            </g>
        </svg>
    </div>
</BaseLayout>

<style>
    .inner {
        display: flex;
        justify-content: center;

        width: 100%;
        height: 100%;

        /* position: relative; */
        padding: 128px;
    }

    .social {
        margin-block-start: 10px;
        display: flex;
        gap: 8px;
    }

    .text {
        align-self: center;
        writing-mode: vertical-lr;
        text-orientation: upright;

        position: absolute;
        left: 0;

        padding: 32px 16px;
        border-radius: 4px;

        background-color: hsla(var(--color-light), 0.4);
    }

    svg {
    }

    .text span {
        word-spacing: initial;
        transform: translateY(1.2px);
        display: inline-block;
        text-transform: uppercase;
        text-shadow: 0 2px 0 hsl(var(--color-offset)),
            0 4px 0 hsl(var(--color-secondary)),
            0 6px 0 hsl(var(--color-ternary));
    }
</style>
