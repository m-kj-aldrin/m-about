---
import TimeOfRender from "@lib/components/TimeOfRender.astro";
import AnimateTransform from "@lib/components/svg/animations/AnimateTransform.astro";
import BaseLayout from "@lib/layouts/BaseLayout.astro";
import { IF } from "@lib/utils/comperator";
import { randn_bm } from "@lib/utils/map";
import { frand } from "@lib/utils/stokhos";
import { irand, pick } from "@lib/utils/stokhos";
import { chance } from "@lib/utils/stokhos";

export const prerender = false

const bm_chance = (r: number) => chance(r, randn_bm);

function req(width: number, height: number, x: number, y: number, depth = 0) {
    if (depth > 5) {
        return [{ width, height, x, y, end: true }];
    }

    let rectangles: { width: number; height: number; x: number; y: number }[] =
        [];
    let half_width = width / 2;
    let half_height = height / 2;

    depth += 1;

    if (bm_chance(0.25)) {
        rectangles.push(...req(half_width, half_height, x, y, depth));
    } else {
        rectangles.push({ width: half_width, height: half_height, x, y });
    }
    if (bm_chance(0.125)) {
        rectangles.push(
            ...req(half_width, half_height, half_width + x, y, depth)
        );
    } else {
        rectangles.push({
            width: half_width,
            height: half_height,
            x: half_width + x,
            y,
        });
    }
    if (bm_chance(0.75)) {
        rectangles.push(
            ...req(half_width, half_height, x, half_height + y, depth)
        );
    } else {
        rectangles.push({
            width: half_width,
            height: half_height,
            x,
            y: half_height + y,
        });
    }
    if (bm_chance(0.25)) {
        rectangles.push(
            ...req(
                half_width,
                half_height,
                half_width + x,
                half_height + y,
                depth
            )
        );
    } else {
        rectangles.push({
            width: half_width,
            height: half_height,
            x: half_width + x,
            y: half_height + y,
        });
    }

    return rectangles;
}
---

<BaseLayout title="fit" fullScreen={true}>
    <svg viewBox="-256 -256 512 512">
        <g transform="translate(-256 -256)">
            <text font-size="10" y="1.5ex">
                <TimeOfRender />
                <a xlink:href="#">
                    <tspan font-size="14">&circlearrowright;</tspan>
                </a>
            </text>
            <g stroke="currentColor" transform="translate(256 256) scale(0.85) translate(-256 -256)">
                {
                    req(512, 512, 0, 0).map(({ width, height, x, y, end }) => {
                        return (
                            <g
                                transform={
                                    end &&
                                    `translate(${x + width / 2} ${y + height / 2}) scale(${irand(1, 3) * 0.25}) translate(${-x - width / 2} ${-y - height / 2})`
                                }
                                style={`--duration:${frand(0.25, 3)};`}
                            >
                                <g
                                    transform={`translate(${x + width / 2} ${y + height / 2})`}
                                >
                                    <g>
                                        <rect
                                            {width}
                                            {height}
                                            x={-width / 2}
                                            y={-height / 2}
                                            fill={
                                                (end &&
                                                    `hsl(var(--color-${pick(["primary", "secondary", "ternary", "offset"])}))`) ||
                                                "hsl(var(--color-light))"
                                            }
                                            stroke={end && "none"}
                                            stroke-dasharray={
                                                bm_chance(0.5) ? "8 2" : "2 2"
                                            }
                                        />
                                        {IF(
                                            end,
                                            <AnimateTransform type="rotate" dur={7000} begin={frand(0,3)} calcMode="discrete" values="0 0 0;45 0 0;90 0 0;135 0 0;180 0 0;225 0 0;270 0 0;315 0 0" repeatCount="indefinite"></AnimateTransform>
                                            <AnimateTransform
                                                type={"scale"}
                                                dur={2000}
                                                begin={frand(0, 3)}
                                                calcMode={"discrete"}
                                                values={"1 1;1.25 0.5"}
                                                repeatCount={"indefinite"}
                                            />
                                            <AnimateTransform
                                                type={"scale"}
                                                dur={3000}
                                                begin={frand(3, 8)}
                                                calcMode={"discrete"}
                                                values={"1 1;0.5 1.25"}
                                                repeatCount={"indefinite"} additive={"sum"} />
                                        )}
                                    </g>
                                </g>
                            </g>
                        );
                    })
                }
            </g>
        </g>
    </svg>
</BaseLayout>

<style>
    svg {
        height: 100%;
        width: 100%;
    }


    @keyframes bob {
        from {
            transform: scale(1);
        }
        to {
            transform: scale(1.5);
        }
    }
</style>
