---
import AnimateTransform from "@lib/components/svg/animations/AnimateTransform.astro";
import G from "@lib/components/svg/builtin/G.astro";
import Rect from "@lib/components/svg/builtin/Rect.astro";
import BaseLayout from "@lib/layouts/BaseLayout.astro";
import type { ColorNames } from "@lib/types/colors";
import { range } from "@lib/utils/iter";
import { randn_bm } from "@lib/utils/map";
import { chance, frand, irand, rand, pick } from "@lib/utils/stokhos";
---

<BaseLayout title="ani" fullScreen={true}>
    <svg viewBox="-256 -256 512 512" height="100%" width="100%">
        {
            range(512).map((i) => {
                let w = irand(1, 4) * 4;
                let dir = chance(0.5) ? 1 : -1;
                let startX = frand(-90, 90);
                let transXdist = frand(-40, 40);
                let rotAmount = frand(0.1, 1);
                let h = irand(1, 8);
                let color = pick([
                    "primary",
                    "secondary",
                    "ternary",
                    "offset",
                ] as ColorNames[]);

                return (
                    <G fill={`hsl(var(--color-${color}))`}>
                        <G>
                            <G transform={`translate(${startX} 0)`}>
                                <G>
                                    <Rect size={[1, h]} pos={[-0, -h / 2]} />
                                    <AnimateTransform
                                        type="rotate"
                                        values={`0 0 0;${30 * rotAmount} 0 0;0 0 0`}
                                        dur={frand(3, 9) * 1000}
                                        repeatCount={"indefinite"}
                                    />
                                </G>
                            </G>
                            <AnimateTransform
                                type="translate"
                                values={`${startX} 0;${w} 0;${startX} 0`}
                                dur={irand(16, 32) * 1000}
                                repeatCount={"indefinite"}
                            />
                        </G>
                        <AnimateTransform
                            type="rotate"
                            from="0 0 0"
                            to={`${360 * dir} 0 0`}
                            dur={frand(8.5, 32) * 1000}
                            repeatCount={"indefinite"}
                        />
                    </G>
                );
            })
        }
    </svg>
</BaseLayout>

<script is:inline>
    const svg = document.querySelector("main svg");

    let prevTime = +localStorage.getItem("svgTime");

    svg.setCurrentTime(prevTime);

    const ani = (t) => {
        let svgTime = svg.getCurrentTime();
        localStorage.setItem("svgTime", `${svgTime}`);

        requestAnimationFrame(ani);
    };
    requestAnimationFrame(ani);
</script>
